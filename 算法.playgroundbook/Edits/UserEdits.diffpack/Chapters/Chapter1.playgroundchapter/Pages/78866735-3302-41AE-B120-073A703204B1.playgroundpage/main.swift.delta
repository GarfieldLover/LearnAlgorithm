<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/**
 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
 你可以按任意顺序返回答案。
 
 示例 1：
 
 输入：nums = [2,7,11,15], target = 9
 输出：[0,1]
 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
 示例 2：
 
 输入：nums = [3,2,4], target = 6
 输出：[1,2]
 示例 3：
 
 输入：nums = [3,3], target = 6
 输出：[0,1]
 
 提示：
 2 &lt;= nums.length &lt;= 104
 -109 &lt;= nums[i] &lt;= 109
 -109 &lt;= target &lt;= 109
 只会存在一个有效答案
 进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？
 
 来源：力扣（LeetCode）
 链接：https://leetcode-cn.com/problems/two-sum
 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 560}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>func twoSum(_ nums: [Int], _ target: Int) -&gt; [Int] {
    var dic: [Int: Int] = [:]
    var result: [Int] = [Int]()
    for (index, num) in nums.enumerated(){
        let other = target - num
        if let otherIndex = dic[other] {
            result.append(otherIndex)
            result.append(index)
        }else{
            dic[num] = index
        }
    }
    return result
}
let array = twoSum([2,7,11,15], 9)
print("\(array)")
</string>
			<key>ModifiedRange</key>
			<string>{561, 436}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
